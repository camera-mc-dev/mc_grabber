import os

# pull in the parent environment
Import('env')
Import('buildDir')
Import('bm')

# copy environment so that we don't change it
srcEnv = env.Clone()


# --------------------------------------------
#
# Any .cpp file in this directory is considered to be a 1-file
# program.
#
# Any sub directories are considered to each be one multi-file
# program.
#
# --------------------------------------------

sconsDir = os.getcwd()
os.chdir("%s"%(Dir(".").srcnode().abspath))

# a small "quirk" of scons is that it automatically works out
# which compiler to call. Only trouble with that is that, once we've
# got into a build directory, it kind of forgets, and at the linker stage,
# sees just .o files and thus uses gcc. Using gcc when everything else is c++
# means it doesn't automatically pull in the c++ libraries. Ooops.
srcEnv.Replace(LINK=srcEnv['CXX'])

# make sure we link against our library
srcEnv.Append(LIBPATH = ["%s/../mc_core/%s/src"%(Dir('#').abspath, buildDir)])
srcEnv.Append(LIBPATH = ["%s/../mc_imgproc/%s/src"%(Dir('#').abspath, buildDir)])

srcEnv.Append(CPPPATH = ["%s/src"%(Dir('#').abspath)] )
srcEnv.Append(LIBPATH = ["%s/%s/src"%(Dir('#').abspath, buildDir)])
srcEnv.Prepend(LIBS = ["MC-core", "MC-imgproc", "MC-grabber"])

# now find the source files.
# find any .cpp files in the current directory.
cpps = [f for f in os.listdir('.') if f[-4:] == '.cpp']
for f in cpps:
	srcf = "%s"%f
	objf = "%s/%s/bin/obj/%s"%( Dir('#').abspath, buildDir, f[:-4] )
	tname = "%s/%s/bin/%s"%(Dir('#').abspath, buildDir,   f[:-4])
	targ = srcEnv.Object(objf, srcf)
	srcEnv.Program(tname, targ)


# now search through any subDirectories.
# we are only going to go one level deep.
# I consider it to be a but that I have to use 'tools' instead of 'utils'
# because if I use 'utils' Scons gets confused. Black mark against Scons :(
dirs = [f for f in os.listdir('.') if os.path.isdir(f) ]
for d in dirs:
	dfs = os.listdir(d)
	dcpps = ["%s"%(f) for f in dfs if f[-4:] == '.cpp']
	if len(dcpps) > 0:
		print dcpps
		objs = []
		for f in dcpps:
			srcf = "%s/%s"%(d,f)
			objf = "%s/%s/bin/obj/%s/%s.o"%( Dir('#').abspath, buildDir,   d, f[:-4] )
			print f, srcf, objf
			objs.append( srcEnv.Object( objf, srcf ) )
		tname = "%s/%s/bin/%s"%(Dir('#').abspath, buildDir,   d)
		print "tn: ", tname
		srcEnv.Program(target = tname, source = objs )
	

# and go back to whatever directory scons was already in
os.chdir(sconsDir)
