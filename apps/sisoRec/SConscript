import os

# pull in the parent environment
Import('env')
Import('buildDir')
Import('bm')

# copy environment so that we don't change it
srcEnv = env.Clone()


# --------------------------------------------
#
# We assume that there is only one main function.
#
# All .cpp files are assumed to be source files.
# There should be no subdirectories.
#
# --------------------------------------------

sconsDir = os.getcwd()
print "%s"%(Dir(".").srcnode().abspath)
os.chdir("%s"%(Dir(".").srcnode().abspath))

# a small "quirk" of scons is that it automatically works out
# which compiler to call. Only trouble with that is that, once we've
# got into a build directory, it kind of forgets, and at the linker stage,
# sees just .o files and thus uses gcc. Using gcc when everything else is c++
# means it doesn't automatically pull in the c++ libraries. Ooops.
srcEnv.Replace(LINK=srcEnv['CXX'])

# make sure we link against our library
srcEnv.Append(CPPPATH = ["%s/src"%(Dir('#').abspath)] )
srcEnv.Prepend(LIBS = ["MC"])
srcEnv.Append(LIBPATH = ["%s/%s/src"%(Dir('#').abspath, buildDir)])

# now find the source files.

# find all .cpp files in the current directory and compile to objects...
cpps = [f for f in os.listdir('.') if f[-4:] == '.cpp']
targs = []
for f in cpps:
	srcf = "%s"%f
	objf = "%s/%s/bin/%s"%( Dir('#').abspath, buildDir, f[:-4] )
	targ = srcEnv.Object(objf, srcf)
	targs.append(targ)

# then the objects go together to make a program.
srcEnv.Program("%s/%s/bin/sisoRec/sisoRec"%( Dir('#').abspath, buildDir ), targs)


# and go back to whatever directory scons was already in
os.chdir(sconsDir)
